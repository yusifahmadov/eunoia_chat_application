import 'package:eunoia_chat_application/core/encryption/rand.dart';

/// The Diffie-Hellman key.
class DhKey {
  final BigInt? _privateKey;
  final BigInt _publicKey;
  final DhGroup? _group;

  DhKey._(this._privateKey, this._publicKey, this._group);

  String get publicKey => _publicKey.toRadixString(16);

  factory DhKey.fromPublicKey(String hex) {
    BigInt publicKey = BigInt.parse(hex, radix: 16);
    return DhKey._(null, publicKey, null);
  }

  BigInt computeKey(DhKey other) {
    if (_privateKey == null) {
      throw StateError('Private key is not available');
    }
    if (_group?.prime != other._group?.prime ||
        _group?.generator != other._group?.generator) {
      throw ArgumentError('Groups do not match');
    }
    return other._publicKey.modPow(_privateKey, _group!.prime);
  }
}

class DhGroup {
  final BigInt prime;

  final BigInt generator;

  DhGroup(this.prime, this.generator);

  factory DhGroup.byGroupId(int groupId) {
    BigInt p, g;
    switch (groupId) {
      case 1:
        p = BigInt.parse(
            'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF',
            radix: 16);
        g = BigInt.from(2);
        break;
      case 2:
        p = BigInt.parse(
            'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF',
            radix: 16);
        g = BigInt.from(2);
        break;
      case 14:
        p = BigInt.parse(
            'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF',
            radix: 16);
        g = BigInt.from(2);
        break;
      default:
        throw ArgumentError.value(groupId, 'Unknown groupId');
    }
    return DhGroup(p, g);
  }

  DhKey generateKey() {
    BigInt privateKey = BigInt.from(randomInt(prime.toInt() - 1) + 1);
    BigInt publicKey = generator.modPow(privateKey, prime);
    return DhKey._(privateKey, publicKey, this);
  }
}
